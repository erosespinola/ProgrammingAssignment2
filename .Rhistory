## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() {
x
}
set.inverse <- function(inv) {
inverse <<- inv
}
get.inverse <- function() {
inverse
}
list(set = set,
get = get,
set.inverse = set.inverse,
get.inverse = get.inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inverse <- x$get.inverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
matrix <- x$get()
inverse <- solve(matrix, ...)
matrix$set.inverse(inverse)
inverse
}
m <- matrix(c(1,0,0,1),nrow=2,ncol=2)
mc <- makeCacheMatrix(m)
mc$get
mc$get()
mc$get.inverse()
cacheSolve(mc)
l <- mc$get()
l
i <- solve(l)
i
i <- solve(l, ...)
i <- solve(l)
i
mc$set.inverse(i)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() {
x
}
set.inverse <- function(inv) {
inverse <<- inv
}
get.inverse <- function() {
inverse
}
list(set = set,
get = get,
set.inverse = set.inverse,
get.inverse = get.inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inverse <- x$get.inverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
matrix <- x$get()
inverse <- solve(matrix)
matrix$set.inverse(inverse)
inverse
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() {
x
}
set.inverse <- function(inv) {
inverse <<- inv
}
get.inverse <- function() {
inverse
}
list(set = set,
get = get,
set.inverse = set.inverse,
get.inverse = get.inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inverse <- x$get.inverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
matrix <- x$get()
inverse <- solve(matrix)
matrix$set.inverse(inverse)
inverse
}
m <- matrix(c(1,0,0,1),nrow=2,ncol=2)
mc <- makeCacheMatrix(m)
mc
mc$get()
cacheSolve(mc)
